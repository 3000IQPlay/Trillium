buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/repository/maven-public'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'

    }
}


apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

compileJava.options.encoding = 'UTF-8'


version project.modVersion
group project.modGroup //http://maven.apache.org/guides/mini/guide-naming-conventions.html

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = project.forgeVersion
    runDir = 'run'
    mappings = project.mcpVersion
    coreMod = 'dev._3000IQPlay.trillium.mixin.TrilliumLoader'
    makeObfSourceJar = false
}



repositories {
    mavenCentral()
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/maven/'
    }
    maven {
        name = 'swt-repo'
        url = "https://maven-eclipse.github.io/maven"
    }
    maven { url 'https://repo.opencollab.dev/maven-snapshots/' }
    maven { url 'https://repo.opencollab.dev/maven-releases/' }
	maven {
	    url = "https://repo.viaversion.com"
	}
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }

    jcenter()
}
configurations {
    jarLibs
}

dependencies {
    compile group: "com.googlecode.json-simple", name: "json-simple", version: "1.1.1"
    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }
	compile ('com.viaversion:viaversion:4.0.2-SNAPSHOT'){
        exclude module: 'mcmod-info'
    }
	compile 'org.apache.httpcomponents:httpasyncclient:4.1.4'
    compile 'org.apache.httpcomponents:httpclient:4.5.13'
    compile 'org.apache.httpcomponents:httpcore:4.4.14'
    compile 'org.apache.httpcomponents:httpcore-nio:4.4.14'
    compile 'org.apache.httpcomponents:httpmime:4.5.13'
	compile 'org.json:json:20210307'
    compile 'com.mashape.unirest:unirest-java:1.4.9'
    compile 'club.minnced:java-discord-rpc:2.0.2'
	compile 'com.viaversion:viaversion:4.2.2-SNAPSHOT'
    compile 'com.viaversion:viabackwards:4.2.1-SNAPSHOT'
    compile 'org.yaml:snakeyaml:1.29'
    implementation configurations.jarLibs
}



task getDeps(type: Copy) {
    from sourceSets.main.runtimeClasspath
    into 'runtime/'
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}

shadowJar {
    dependencies {
        include(dependency('club.minnced:java-discord-rpc'))
        include(dependency('com.googlecode.json-simple:json-simple:1.1.1'))
        include(dependency('org.spongepowered:mixin'))
		include(dependency('org.json:json'))
        include(dependency('com.mashape.unirest:unirest-java'))
		include(dependency('org.apache.httpcomponents:httpasyncclient'))
        include(dependency('org.apache.httpcomponents:httpclient'))
        include(dependency('org.apache.httpcomponents:httpcore'))
        include(dependency('org.apache.httpcomponents:httpcore-nio'))
        include(dependency('org.apache.httpcomponents:httpmime'))
		include(dependency('com.viaversion:viabackwards:4.0.2-SNAPSHOT'))
        include(dependency('org.yaml:snakeyaml:1.29'))
		include(dependency('com.viaversion:viaversion'))
        include(dependency('com.viaversion:viabackwards'))
    }
    exclude 'dummyThing'
    exclude 'LICENSE.txt'
	exclude 'fabric.mod.json'
	exclude 'velocity-plugin.json'
	exclude '*.yml'
	exclude 'META-INF/versions/**'
	exclude '**/*.RSA'
	exclude '**/*.SF'
	exclude '**/module-info.class'
	exclude '**/LICENSE'
	exclude '**/*.txt'
    classifier = 'release'
}

mixin {
    defaultObfuscationEnv searge
    add sourceSets.main, 'mixins.trillium.refmap.json'

}

reobf {
    shadowJar {
        mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

jar {
    manifest {
        attributes(
                'MixinConfigs': 'mixins.trillium.json',
                'tweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0,
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLCorePlugin': 'dev._3000IQPlay.trillium.mixin.TrilliumLoader',
                'ForceLoadAsMod': 'true',
                'FMLAT': 'trillium_at.cfg',
        )
    }
}



build.dependsOn(shadowJar)