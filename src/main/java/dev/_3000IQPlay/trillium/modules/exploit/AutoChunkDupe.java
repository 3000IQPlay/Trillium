package dev._3000IQPlay.trillium.modules.exploit;

import com.mojang.realmsclient.gui.ChatFormatting;
import dev._3000IQPlay.trillium.command.Command;
import dev._3000IQPlay.trillium.command.commands.Chest1Command;
import dev._3000IQPlay.trillium.command.commands.Chest2Command;
import dev._3000IQPlay.trillium.command.commands.Chest3Command;
import dev._3000IQPlay.trillium.modules.Module;
import dev._3000IQPlay.trillium.setting.Setting;
import net.minecraft.inventory.ClickType;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.util.text.TextComponentString;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.network.FMLNetworkEvent;

public class AutoChunkDupe
        extends Module {
	public Setting<Boolean> reEnable = this.register(new Setting<Boolean>("AutoReEnable", false));
	public Setting<Boolean> autoDisconnect = this.register(new Setting<Boolean>("AutoDisconnect", true));
	public Setting<Boolean> disableOnLeave = this.register(new Setting<Boolean>("DisableOnLeave", true));
    public Setting<Boolean> debug = this.register(new Setting<Boolean>("Debug", false));
	int i = 0;
	
    public AutoChunkDupe() {
        super("AutoChunkDupe", "Does the chunk dupe for you!", Module.Category.EXPLOIT, true, false, false);
    }
    
    public void sendDebugMessage(Object msg) {
        if (debug.getValue()) {
            Command.sendMessage(ChatFormatting.RED + "[AutoChunkDupe] " + ChatFormatting.RESET + msg);
        }
    }
	
	@Override
	public void onEnable() {
		i = 0;
		if (Chest1Command.POS == null || Chest2Command.POS == null || Chest2Command.POS == null) {
			Command.sendMessage("You need to set positins of the chests by using commands - chest1, chest2 and chest3");
			Command.sendMessage("chest1 - Chest, that you are getting the items from");
			Command.sendMessage("chest2 - Chest, that you are filling with the items");
			Command.sendMessage("chest3 - Chest, that contains the books");
			this.disable();
		}
	}
	
	@SubscribeEvent
    public void onDisconnect(FMLNetworkEvent.ClientDisconnectionFromServerEvent event) {
	    if (this.isEnabled() && this.disableOnLeave.getValue()) {
            this.disable();
        }
    }

    @Override
    public void onTick() {
        if (AutoChunkDupe.fullNullCheck()) {
			return;
		}
        ++i;
        BlockPos Chest1 = Chest1Command.POS;
        BlockPos Chest2 = Chest2Command.POS;
        BlockPos Chest3 = Chest3Command.POS;
        switch (i) {
            case 5:
                mc.playerController.processRightClickBlock(mc.player, mc.world, Chest1, EnumFacing.UP, new Vec3d(EnumFacing.UP.getDirectionVec()), EnumHand.MAIN_HAND);
                sendDebugMessage("Opening chest 1.");
                break;
            case 10:
                for (int i = 0; i<=36; i++) mc.playerController.windowClick(mc.player.openContainer.windowId, i, 0, ClickType.QUICK_MOVE, mc.player);
                sendDebugMessage("Getting items from chest 1");
                break;
            case 15:
                mc.player.closeScreen();
                sendDebugMessage("Closing chest screen.");
                break;
            case 20:
                mc.playerController.processRightClickBlock(mc.player, mc.world, Chest2, EnumFacing.UP, new Vec3d(EnumFacing.UP.getDirectionVec()), EnumHand.MAIN_HAND);
                sendDebugMessage("Opening chest 2.");
                break;
            case 25:
                for (int i = 54; i<=89; i++) mc.playerController.windowClick(mc.player.openContainer.windowId, i, 0, ClickType.QUICK_MOVE, mc.player);
                sendDebugMessage("Filling items from chest 2.");
                break;
            case 30:
                mc.player.closeScreen();
                sendDebugMessage("Closing chest screen");
                break;
            case 35:
                mc.playerController.processRightClickBlock(mc.player, mc.world, Chest3, EnumFacing.UP, new Vec3d(EnumFacing.UP.getDirectionVec()), EnumHand.MAIN_HAND);
                sendDebugMessage("Opening chest 3.");
                break;
            case 40:
                mc.playerController.windowClick(mc.player.openContainer.windowId, 0, 0, ClickType.PICKUP, mc.player);
                sendDebugMessage("Getting book from the first slot.");
                break;
            case 45:
                for (int i = 0; i<=14; i = i + 2) mc.playerController.windowClick(mc.player.openContainer.windowId, i, 1, ClickType.PICKUP, mc.player);
                sendDebugMessage("Setting the book in 1-2 order [1].");
                break;
            case 50:
                mc.playerController.windowClick(mc.player.openContainer.windowId, 1, 0, ClickType.PICKUP, mc.player);
                sendDebugMessage("Getting the book from the second slot.");
                break;
            case 55:
                for (int i = 1; i<=15; i = i + 2) mc.playerController.windowClick(mc.player.openContainer.windowId, i, 1, ClickType.PICKUP, mc.player);
                sendDebugMessage("Setting the book in 1-2 order [2].");
                break;
            case 60:
			    if (this.autoDisconnect.getValue().booleanValue()) {
                    mc.player.connection.getNetworkManager().closeChannel(new TextComponentString(ChatFormatting.RED + "[AutoChunkDupe] Disconnected to reload chunks."));
			    }
				if (!this.reEnable.getValue().booleanValue()) {
                    this.disable();
			    }
                i = 0;
                break;
        }
    }
}